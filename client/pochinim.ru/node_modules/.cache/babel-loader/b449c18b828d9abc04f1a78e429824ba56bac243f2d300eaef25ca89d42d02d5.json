{"ast":null,"code":"import { json } from \"react-router-dom\";\nclass UserController {\n  async checkUserEmailInBd(email) {\n    const data = await fetch(`http://localhost:4000/api/users/check_email/${email}`, {\n      credentials: 'include',\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await data.json();\n  }\n  async registrate(email, login, password) {\n    const body = {\n      \"login\": login,\n      \"password\": password,\n      \"email\": email\n    };\n    const data = await fetch(`http://localhost:4000/api/users`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(body)\n    });\n    const ret = await data.json();\n    localStorage.setItem('token', ret.accessToken);\n    localStorage.setItem('mail', email);\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async getSendCode(email) {\n    const data = await fetch(`http://localhost:4000/api/users/send_code/${email}`, {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const code = await data.json();\n    if (code !== null && code !== void 0 && code.message) {\n      return false;\n    }\n    return code;\n  }\n  async logInUser(email, password) {\n    const body = {\n      'email': email,\n      'password': password\n    };\n    const data = await fetch(`http://localhost:4000/api/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: 'include',\n      body: JSON.stringify(body)\n    });\n    const ret = await data.json();\n    localStorage.setItem('token', ret === null || ret === void 0 ? void 0 : ret.accessToken);\n    localStorage.setItem('mail', email);\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async refreshUserTokens() {\n    if (localStorage.getItem('token')) {\n      const data = await fetch(`http://localhost:4000/api/refresh`, {\n        credentials: 'include',\n        method: \"GET\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const ret = await data.json();\n      localStorage.setItem('token', ret === null || ret === void 0 ? void 0 : ret.accessToken);\n      if (ret !== null && ret !== void 0 && ret.message) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n  async logOutUser() {\n    const data = await fetch(`http://localhost:4000/api/users/logout`, {\n      credentials: 'include',\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const ret = await data.json();\n    localStorage.removeItem('token');\n    localStorage.removeItem('mail');\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async getUserInfo(email, secondCall = true) {\n    var data = await fetch(`http://localhost:4000/api/users/${email}`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (data.status == 401 && secondCall) {\n      await userController.refreshUserTokens();\n      data = await userController.getUserInfo(email, false);\n    }\n    console.log(data);\n    return data;\n  }\n  async updateUserField(field, newValue, id_account, secondCall = true) {\n    const body = {\n      'column_name': field,\n      'new_value': newValue,\n      'id_account': id_account\n    };\n    var data = await fetch(`http://localhost:4000/api/users`, {\n      credentials: \"include\",\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(body)\n    });\n    if (data.status == 401 && secondCall) {\n      await userController.refreshUserTokens();\n      data = await userController.updateUserField(field, newValue, id_account, false);\n    }\n    return await data.json();\n  }\n  async getUserTopics(email, secondCall = true) {\n    var data = await fetch(`http://localhost:4000/api/topics/${email}`, {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (data.status == 401 && secondCall) {\n      await userController.refreshUserTokens();\n      data = userController.getUserTopics(email, false);\n    }\n    return await data.json();\n  }\n}\nconst userController = new UserController();\nexport default userController;","map":{"version":3,"names":["json","UserController","checkUserEmailInBd","email","data","fetch","credentials","method","headers","registrate","login","password","body","JSON","stringify","ret","localStorage","setItem","accessToken","message","getSendCode","code","logInUser","refreshUserTokens","getItem","logOutUser","removeItem","getUserInfo","secondCall","status","userController","console","log","updateUserField","field","newValue","id_account","getUserTopics"],"sources":["C:/Users/denis/VSCode_projects/Pochinim.ru/client/pochinim.ru/src/controllers/USER-controller.js"],"sourcesContent":["import { json } from \"react-router-dom\";\r\n\r\nclass UserController{\r\n\r\n    async checkUserEmailInBd(email){\r\n        const data = await fetch(`http://localhost:4000/api/users/check_email/${email}`,{\r\n            credentials: 'include',\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        return (await data.json());\r\n    }\r\n\r\n    async registrate(email, login, password){\r\n        const body = {\"login\": login, \"password\": password, \"email\": email};\r\n\r\n        const data = await fetch(`http://localhost:4000/api/users`,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }, \r\n            credentials: 'include',\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        const ret = await data.json();\r\n\r\n        localStorage.setItem('token', ret.accessToken);\r\n        localStorage.setItem('mail', email);\r\n\r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async getSendCode(email){\r\n        const data = await fetch(`http://localhost:4000/api/users/send_code/${email}`,{\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        const code = await data.json();\r\n\r\n        if(code?.message){\r\n            return false;\r\n        }\r\n        \r\n        return code;\r\n    }\r\n\r\n    async logInUser(email, password){\r\n        const body = {'email': email, 'password': password};\r\n\r\n        const data = await fetch(`http://localhost:4000/api/users/login`,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }, \r\n            credentials: 'include',\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        const ret = await data.json();\r\n\r\n        localStorage.setItem('token', ret?.accessToken);\r\n        localStorage.setItem('mail', email);\r\n        \r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async refreshUserTokens(){\r\n        if(localStorage.getItem('token')){\r\n            const data = await fetch(`http://localhost:4000/api/refresh`,{\r\n                credentials: 'include',\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n\r\n            const ret = await data.json();\r\n            \r\n            localStorage.setItem('token', ret?.accessToken);\r\n\r\n            if(ret?.message){\r\n                return false;\r\n            }else{\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async logOutUser(){\r\n        const data = await fetch(`http://localhost:4000/api/users/logout`,{\r\n            credentials: 'include',\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        const ret = await data.json();\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('mail');\r\n\r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async getUserInfo(email, secondCall = true){\r\n        var data = await fetch(`http://localhost:4000/api/users/${email}`, {\r\n            credentials: \"include\",\r\n            method: \"GET\", \r\n            headers : {\r\n                \"Accept\": \"application/json\",                    \r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        });\r\n\r\n        if(data.status == 401 && secondCall){\r\n            await userController.refreshUserTokens();\r\n            data = await userController.getUserInfo(email, false);\r\n        }\r\n\r\n        console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    async updateUserField(field, newValue, id_account, secondCall = true){\r\n        const body = {'column_name': field, 'new_value': newValue, 'id_account': id_account};\r\n\r\n        var data = await fetch(`http://localhost:4000/api/users`,{\r\n            credentials: \"include\",\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify(body)\r\n        });\r\n        \r\n        if(data.status == 401 && secondCall){\r\n            await userController.refreshUserTokens();\r\n            data = await userController.updateUserField(field, newValue, id_account, false);\r\n        }\r\n\r\n        return (await data.json());\r\n    }\r\n\r\n    async getUserTopics(email, secondCall = true){\r\n        var data = await fetch(`http://localhost:4000/api/topics/${email}`, {\r\n            credentials: \"include\",\r\n            method: \"GET\", \r\n            headers : {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        });\r\n\r\n        if(data.status == 401 && secondCall){\r\n            await userController.refreshUserTokens();\r\n            data = userController.getUserTopics(email, false);\r\n        }\r\n\r\n        return (await data.json());\r\n\r\n    }\r\n}\r\n\r\nconst userController = new UserController();\r\n\r\nexport default userController;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}