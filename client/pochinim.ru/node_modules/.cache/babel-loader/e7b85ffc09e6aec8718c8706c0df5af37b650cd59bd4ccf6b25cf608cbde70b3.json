{"ast":null,"code":"const jose = require('jose');\nconst crypto = require('crypto-js');\nclass Tokens {\n  generateToken(payload) {\n    const secretKey = crypto.SHA256(payload);\n    console.log(secretKey.words);\n    const accessToken = new jose.SignJWT({\n      id: process.env.JWT_ACCESS_SECRET\n    }).setProtectedHeader({\n      alg: 'HS256'\n    }) // algorithm\n    .setIssuedAt().setExpirationTime('30m').sign(Uint8Array.of(secretKey.words));\n    const refreshToken = new jose.SignJWT({\n      id: process.env.JWT_REFRESH_SECRET\n    }).setProtectedHeader({\n      alg: 'HS256'\n    }) // algorithm\n    .setIssuedAt().setExpirationTime('30d').sign(Uint8Array.of(secretKey.words));\n    return {\n      accessToken,\n      refreshToken\n    };\n  }\n  async saveToken(account_id, refreshToken) {\n    const body = {\n      \"account_token\": refreshToken,\n      \"account_id\": account_id\n    };\n    const response1 = await fetch(\"http://localhost:4000/saveToken\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    console.log(response1);\n    if (response1 === \"ERROR: account with this token have been created!\") {\n      const response2 = await fetch(\"http://localhost:4000/updateToken\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      console.log(response2);\n    }\n    return refreshToken;\n  }\n}\nmodule.exports = new Tokens();","map":{"version":3,"names":["jose","require","crypto","Tokens","generateToken","payload","secretKey","SHA256","console","log","words","accessToken","SignJWT","id","process","env","JWT_ACCESS_SECRET","setProtectedHeader","alg","setIssuedAt","setExpirationTime","sign","Uint8Array","of","refreshToken","JWT_REFRESH_SECRET","saveToken","account_id","body","response1","fetch","method","headers","JSON","stringify","response2","module","exports"],"sources":["C:/Users/denis/VSCode_projects/Pochinim.ru/client/pochinim.ru/src/components/SignInUp/tokens.js"],"sourcesContent":["const jose = require('jose')\r\nconst crypto = require('crypto-js')\r\nclass Tokens {\r\n    generateToken(payload){\r\n        const secretKey = crypto.SHA256(payload);\r\n\r\n        console.log(secretKey.words);\r\n        const accessToken = new jose.SignJWT({id: process.env.JWT_ACCESS_SECRET})\r\n        .setProtectedHeader({ alg: 'HS256' }) // algorithm\r\n        .setIssuedAt()\r\n        .setExpirationTime('30m')\r\n        .sign(Uint8Array.of(secretKey.words));\r\n\r\n        const refreshToken = new jose.SignJWT({id: process.env.JWT_REFRESH_SECRET})\r\n        .setProtectedHeader({ alg: 'HS256' }) // algorithm\r\n        .setIssuedAt()\r\n        .setExpirationTime('30d')\r\n        .sign(Uint8Array.of(secretKey.words));\r\n        return {\r\n            accessToken,\r\n            refreshToken\r\n        };\r\n    }\r\n\r\n    async saveToken(account_id, refreshToken){\r\n\r\n        const body = {\"account_token\": refreshToken, \"account_id\": account_id};\r\n\r\n            const response1 = await fetch(\"http://localhost:4000/saveToken\",{\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            console.log(response1);\r\n\r\n            if(response1 === \"ERROR: account with this token have been created!\")\r\n            {\r\n                const response2 = await fetch(\"http://localhost:4000/updateToken\",{\r\n                    method: \"PUT\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify(body)\r\n                });\r\n                console.log(response2);\r\n            }\r\n\r\n            return refreshToken;\r\n    }\r\n}\r\n\r\nmodule.exports = new Tokens();"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACnC,MAAME,MAAM,CAAC;EACTC,aAAaA,CAACC,OAAO,EAAC;IAClB,MAAMC,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAACF,OAAO,CAAC;IAExCG,OAAO,CAACC,GAAG,CAACH,SAAS,CAACI,KAAK,CAAC;IAC5B,MAAMC,WAAW,GAAG,IAAIX,IAAI,CAACY,OAAO,CAAC;MAACC,EAAE,EAAEC,OAAO,CAACC,GAAG,CAACC;IAAiB,CAAC,CAAC,CACxEC,kBAAkB,CAAC;MAAEC,GAAG,EAAE;IAAQ,CAAC,CAAC,CAAC;IAAA,CACrCC,WAAW,CAAC,CAAC,CACbC,iBAAiB,CAAC,KAAK,CAAC,CACxBC,IAAI,CAACC,UAAU,CAACC,EAAE,CAACjB,SAAS,CAACI,KAAK,CAAC,CAAC;IAErC,MAAMc,YAAY,GAAG,IAAIxB,IAAI,CAACY,OAAO,CAAC;MAACC,EAAE,EAAEC,OAAO,CAACC,GAAG,CAACU;IAAkB,CAAC,CAAC,CAC1ER,kBAAkB,CAAC;MAAEC,GAAG,EAAE;IAAQ,CAAC,CAAC,CAAC;IAAA,CACrCC,WAAW,CAAC,CAAC,CACbC,iBAAiB,CAAC,KAAK,CAAC,CACxBC,IAAI,CAACC,UAAU,CAACC,EAAE,CAACjB,SAAS,CAACI,KAAK,CAAC,CAAC;IACrC,OAAO;MACHC,WAAW;MACXa;IACJ,CAAC;EACL;EAEA,MAAME,SAASA,CAACC,UAAU,EAAEH,YAAY,EAAC;IAErC,MAAMI,IAAI,GAAG;MAAC,eAAe,EAAEJ,YAAY;MAAE,YAAY,EAAEG;IAAU,CAAC;IAElE,MAAME,SAAS,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAC;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;IAC7B,CAAC,CAAC;IAEFpB,OAAO,CAACC,GAAG,CAACoB,SAAS,CAAC;IAEtB,IAAGA,SAAS,KAAK,mDAAmD,EACpE;MACI,MAAMM,SAAS,GAAG,MAAML,KAAK,CAAC,mCAAmC,EAAC;QAC9DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB,CAAC;QAC7CJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;MAC7B,CAAC,CAAC;MACFpB,OAAO,CAACC,GAAG,CAAC0B,SAAS,CAAC;IAC1B;IAEA,OAAOX,YAAY;EAC3B;AACJ;AAEAY,MAAM,CAACC,OAAO,GAAG,IAAIlC,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}