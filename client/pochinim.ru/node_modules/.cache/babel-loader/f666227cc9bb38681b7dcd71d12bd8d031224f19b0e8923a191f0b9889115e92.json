{"ast":null,"code":"import { NativeModules } from 'react-native';\nimport SparkMD5 from 'spark-md5';\nconst g = global;\nconst Md5Module = NativeModules.QuickMd5;\nif (Md5Module && typeof Md5Module.install === 'function') {\n  Md5Module.install();\n}\nfunction stringToArrayBuffer(str) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\nexport function stringMd5(data) {\n  if (typeof g.md5FromArrayBuffer !== 'undefined') {\n    return g.md5FromArrayBuffer(data);\n  } else {\n    const spark = new SparkMD5();\n    spark.append(data);\n    return spark.end();\n  }\n}\nexport function binaryMd5(data) {\n  data = typeof data === 'string' ? stringToArrayBuffer(data) : data;\n  if (typeof g.md5FromArrayBuffer !== 'undefined') {\n    return g.md5FromArrayBuffer(data);\n  } else {\n    const spark = new SparkMD5.ArrayBuffer();\n    spark.append(data);\n    return spark.end();\n  }\n}","map":{"version":3,"names":["NativeModules","SparkMD5","g","global","Md5Module","QuickMd5","install","stringToArrayBuffer","str","buf","ArrayBuffer","length","bufView","Uint8Array","i","strLen","charCodeAt","stringMd5","data","md5FromArrayBuffer","spark","append","end","binaryMd5"],"sources":["C:\\Users\\denis\\VSCode_projects\\Pochinim.ru\\client\\pochinim.ru\\node_modules\\react-native-quick-md5\\lib\\module\\index.tsx"],"sourcesContent":["import { NativeModules } from 'react-native'\nimport SparkMD5 from 'spark-md5'\n\nconst g = global as any\n\nconst Md5Module = NativeModules.QuickMd5\n\nif (Md5Module && typeof Md5Module.install === 'function') {\n  Md5Module.install()\n}\n\nfunction stringToArrayBuffer(str: string) {\n  const buf = new ArrayBuffer(str.length)\n  const bufView = new Uint8Array(buf)\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i)\n  }\n  return buf\n}\n\nexport function stringMd5(data: string): string {\n  if (typeof g.md5FromArrayBuffer !== 'undefined') {\n    return g.md5FromArrayBuffer(data)\n  } else {\n    const spark = new SparkMD5()\n    spark.append(data)\n    return spark.end()\n  }\n}\n\nexport function binaryMd5(data: string | ArrayBuffer): string {\n  data = typeof data === 'string' ? stringToArrayBuffer(data) : data\n\n  if (typeof g.md5FromArrayBuffer !== 'undefined') {\n    return g.md5FromArrayBuffer(data)\n  } else {\n    const spark = new SparkMD5.ArrayBuffer()\n    spark.append(data)\n    return spark.end()\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,MAAMC,CAAC,GAAGC,MAAV;AAEA,MAAMC,SAAS,GAAGJ,aAAa,CAACK,QAAhC;AAEA,IAAID,SAAS,IAAI,OAAOA,SAAS,CAACE,OAAjB,KAA6B,UAA9C,EAA0D;EACxDF,SAAS,CAACE,OAAV;AACD;AAED,SAASC,mBAATA,CAA6BC,GAA7B,EAA0C;EACxC,MAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,GAAG,CAACG,MAApB,CAAZ;EACA,MAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeJ,GAAf,CAAhB;EACA,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGP,GAAG,CAACG,MAA7B,EAAqCG,CAAC,GAAGC,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;IACpDF,OAAO,CAACE,CAAD,CAAP,GAAaN,GAAG,CAACQ,UAAJ,CAAeF,CAAf,CAAb;EACD;EACD,OAAOL,GAAP;AACD;AAED,OAAO,SAASQ,SAATA,CAAmBC,IAAnB,EAAyC;EAC9C,IAAI,OAAOhB,CAAC,CAACiB,kBAAT,KAAgC,WAApC,EAAiD;IAC/C,OAAOjB,CAAC,CAACiB,kBAAF,CAAqBD,IAArB,CAAP;EACD,CAFD,MAEO;IACL,MAAME,KAAK,GAAG,IAAInB,QAAJ,EAAd;IACAmB,KAAK,CAACC,MAAN,CAAaH,IAAb;IACA,OAAOE,KAAK,CAACE,GAAN,EAAP;EACD;AACF;AAED,OAAO,SAASC,SAATA,CAAmBL,IAAnB,EAAuD;EAC5DA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,GAA2BX,mBAAmB,CAACW,IAAD,CAA9C,GAAuDA,IAA9D;EAEA,IAAI,OAAOhB,CAAC,CAACiB,kBAAT,KAAgC,WAApC,EAAiD;IAC/C,OAAOjB,CAAC,CAACiB,kBAAF,CAAqBD,IAArB,CAAP;EACD,CAFD,MAEO;IACL,MAAME,KAAK,GAAG,IAAInB,QAAQ,CAACS,WAAb,EAAd;IACAU,KAAK,CAACC,MAAN,CAAaH,IAAb;IACA,OAAOE,KAAK,CAACE,GAAN,EAAP;EACD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}