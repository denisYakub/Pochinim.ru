{"ast":null,"code":"const jose = require('jose');\nclass Tokens {\n  generateToken(payload) {\n    //const accessToken = jose.sign(payload, 'jwt-token-access')\n    //const refreshToken = jose.sign(payload, 'jwt-token-refreash')\n    const accessToken = new jose.SignJWT({\n      id: payload\n    }).setProtectedHeader({\n      alg: 'HS256'\n    }) // algorithm\n    .setIssuedAt().setExpirationTime('30m').sign(process.env.JWT_ACCESS_SECRET);\n    const refreshToken = new jose.SignJWT({\n      id: payload\n    }).setProtectedHeader({\n      alg: 'HS256'\n    }) // algorithm\n    .setIssuedAt().setExpirationTime('30d').sign(process.env.JWT_REFRESH_SECRET);\n    return {\n      accessToken,\n      refreshToken\n    };\n  }\n  async saveToken(account_id, refreshToken) {\n    const body = {\n      \"account_token\": refreshToken,\n      \"account_id\": account_id\n    };\n    const response1 = await fetch(\"http://localhost:4000/saveToken\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    console.log(response1);\n    if (response1 === \"ERROR: account with this token have been created!\") {\n      const response2 = await fetch(\"http://localhost:4000/updateToken\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      console.log(response2);\n    }\n    return refreshToken;\n  }\n}\nmodule.exports = new Tokens();","map":{"version":3,"names":["jose","require","Tokens","generateToken","payload","accessToken","SignJWT","id","setProtectedHeader","alg","setIssuedAt","setExpirationTime","sign","process","env","JWT_ACCESS_SECRET","refreshToken","JWT_REFRESH_SECRET","saveToken","account_id","body","response1","fetch","method","headers","JSON","stringify","console","log","response2","module","exports"],"sources":["C:/Users/denis/VSCode_projects/Pochinim.ru/client/pochinim.ru/src/components/SignInUp/tokens.js"],"sourcesContent":["const jose = require('jose')\r\nclass Tokens {\r\n    generateToken(payload){\r\n        //const accessToken = jose.sign(payload, 'jwt-token-access')\r\n        //const refreshToken = jose.sign(payload, 'jwt-token-refreash')\r\n        const accessToken = new jose.SignJWT({id: payload})\r\n        .setProtectedHeader({ alg: 'HS256' }) // algorithm\r\n        .setIssuedAt()\r\n        .setExpirationTime('30m')\r\n        .sign(process.env.JWT_ACCESS_SECRET);\r\n\r\n        const refreshToken = new jose.SignJWT({id: payload})\r\n        .setProtectedHeader({ alg: 'HS256' }) // algorithm\r\n        .setIssuedAt()\r\n        .setExpirationTime('30d')\r\n        .sign(process.env.JWT_REFRESH_SECRET);\r\n        return {\r\n            accessToken,\r\n            refreshToken\r\n        };\r\n    }\r\n\r\n    async saveToken(account_id, refreshToken){\r\n\r\n        const body = {\"account_token\": refreshToken, \"account_id\": account_id};\r\n\r\n            const response1 = await fetch(\"http://localhost:4000/saveToken\",{\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(body)\r\n            });\r\n\r\n            console.log(response1);\r\n\r\n            if(response1 === \"ERROR: account with this token have been created!\")\r\n            {\r\n                const response2 = await fetch(\"http://localhost:4000/updateToken\",{\r\n                    method: \"PUT\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify(body)\r\n                });\r\n                console.log(response2);\r\n            }\r\n\r\n            return refreshToken;\r\n    }\r\n}\r\n\r\nmodule.exports = new Tokens();"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,MAAM,CAAC;EACTC,aAAaA,CAACC,OAAO,EAAC;IAClB;IACA;IACA,MAAMC,WAAW,GAAG,IAAIL,IAAI,CAACM,OAAO,CAAC;MAACC,EAAE,EAAEH;IAAO,CAAC,CAAC,CAClDI,kBAAkB,CAAC;MAAEC,GAAG,EAAE;IAAQ,CAAC,CAAC,CAAC;IAAA,CACrCC,WAAW,CAAC,CAAC,CACbC,iBAAiB,CAAC,KAAK,CAAC,CACxBC,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;IAEpC,MAAMC,YAAY,GAAG,IAAIhB,IAAI,CAACM,OAAO,CAAC;MAACC,EAAE,EAAEH;IAAO,CAAC,CAAC,CACnDI,kBAAkB,CAAC;MAAEC,GAAG,EAAE;IAAQ,CAAC,CAAC,CAAC;IAAA,CACrCC,WAAW,CAAC,CAAC,CACbC,iBAAiB,CAAC,KAAK,CAAC,CACxBC,IAAI,CAACC,OAAO,CAACC,GAAG,CAACG,kBAAkB,CAAC;IACrC,OAAO;MACHZ,WAAW;MACXW;IACJ,CAAC;EACL;EAEA,MAAME,SAASA,CAACC,UAAU,EAAEH,YAAY,EAAC;IAErC,MAAMI,IAAI,GAAG;MAAC,eAAe,EAAEJ,YAAY;MAAE,YAAY,EAAEG;IAAU,CAAC;IAElE,MAAME,SAAS,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAC;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;IAC7B,CAAC,CAAC;IAEFO,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;IAEtB,IAAGA,SAAS,KAAK,mDAAmD,EACpE;MACI,MAAMQ,SAAS,GAAG,MAAMP,KAAK,CAAC,mCAAmC,EAAC;QAC9DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB,CAAC;QAC7CJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;MAC7B,CAAC,CAAC;MACFO,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;IAC1B;IAEA,OAAOb,YAAY;EAC3B;AACJ;AAEAc,MAAM,CAACC,OAAO,GAAG,IAAI7B,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}