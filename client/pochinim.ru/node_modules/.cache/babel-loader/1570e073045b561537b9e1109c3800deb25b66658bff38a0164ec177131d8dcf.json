{"ast":null,"code":"import fetchServices from \"../services/fetch-services\";\nclass UserController {\n  async checkUserEmailInBd(email) {\n    //const ret = await userServices.checkEmail(email)\n    const ret = await fetchServices.fetchGETWithCredentials(`/users/check_email/${email}`);\n    return ret;\n  }\n  async registrate(email, login, password) {\n    //var ret = await userServices.registrate(name, email, password);\n    const body = {\n      \"login\": login,\n      \"password\": password,\n      \"email\": email\n    };\n    var ret = await fetchServices.fetchPOSTWithCredentials(`/users`, JSON.stringify(body));\n    localStorage.setItem('token', ret.accessToken);\n    localStorage.setItem('mail', email);\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async getSendCode(email) {\n    //var code = await userServices.sendCode(email);\n    var code = await fetchServices.fetchGET(`/users/send_code/${email}`);\n    if (code !== null && code !== void 0 && code.message) {\n      return false;\n    }\n    return code;\n  }\n  async logInUser(email, password) {\n    //var ret = await userServices.logIn(email, password);\n    const body = {\n      \"email\": email,\n      \"password\": password\n    };\n    var ret = await fetchServices.fetchPOSTWithCredentials('/users/login', body);\n    localStorage.setItem('token', ret.accessToken);\n    localStorage.setItem('mail', email);\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async checkForAccess() {\n    if (localStorage.getItem('token')) {\n      //const ret = await userServices.checkAuth();\n      const ret = await fetchServices.fetchGETWithCredentials(`/users/refresh`);\n      localStorage.setItem('token', ret.accessToken);\n      if (ret !== null && ret !== void 0 && ret.message) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n  async logOutUser() {\n    //const ret = await userServices.logOut();\n    const ret = await fetchServices.fetchGETWithCredentials(`/users/logout`);\n    localStorage.removeItem('token');\n    localStorage.removeItem('mail');\n    if (ret !== null && ret !== void 0 && ret.message) {\n      return false;\n    }\n    return true;\n  }\n  async getUserInfo(email) {\n    //const ret = await userServices.getUserInfo(email);\n    const ret = await fetchServices.fetchGETWithCredentialsAndAuthorization(`/users/${email}`, localStorage.getItem('token'));\n    return ret;\n  }\n  async updateUserField(field, newValue) {\n    console.log(field + ' will be now: ' + newValue);\n  }\n  async getUserTopics(email) {\n    //const ret = await topicServices.getAllUserTopics(email);\n    const ret = await fetchServices.fetchGETWithCredentialsAndAuthorization(`/topics/${email}`, localStorage.getItem('token'));\n    console.log(ret);\n    return ret;\n  }\n}\nconst userController = new UserController();\nexport default userController;","map":{"version":3,"names":["fetchServices","UserController","checkUserEmailInBd","email","ret","fetchGETWithCredentials","registrate","login","password","body","fetchPOSTWithCredentials","JSON","stringify","localStorage","setItem","accessToken","message","getSendCode","code","fetchGET","logInUser","checkForAccess","getItem","logOutUser","removeItem","getUserInfo","fetchGETWithCredentialsAndAuthorization","updateUserField","field","newValue","console","log","getUserTopics","userController"],"sources":["C:/Users/denis/VSCode_projects/Pochinim.ru/client/pochinim.ru/src/controllers/USER-controller.js"],"sourcesContent":["import fetchServices from \"../services/fetch-services\";\r\n\r\nclass UserController{\r\n\r\n    async checkUserEmailInBd(email){\r\n        //const ret = await userServices.checkEmail(email)\r\n        const ret = await fetchServices.fetchGETWithCredentials(`/users/check_email/${email}`);\r\n        return ret;\r\n    }\r\n\r\n    async registrate(email, login, password){\r\n        //var ret = await userServices.registrate(name, email, password);\r\n        const body = {\"login\": login, \"password\": password, \"email\": email};\r\n\r\n        var ret = await fetchServices.fetchPOSTWithCredentials(`/users`, JSON.stringify(body));\r\n\r\n        localStorage.setItem('token', ret.accessToken);\r\n        localStorage.setItem('mail', email);\r\n\r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async getSendCode(email){\r\n        //var code = await userServices.sendCode(email);\r\n        var code = await fetchServices.fetchGET(`/users/send_code/${email}`);\r\n\r\n        if(code?.message){\r\n            return false;\r\n        }\r\n        \r\n        return code;\r\n    }\r\n\r\n    async logInUser(email, password){\r\n        //var ret = await userServices.logIn(email, password);\r\n        const body = {\"email\": email, \"password\": password};\r\n\r\n        var ret = (await fetchServices.fetchPOSTWithCredentials('/users/login', body));\r\n        \r\n        localStorage.setItem('token', ret.accessToken)\r\n        localStorage.setItem('mail', email);\r\n\r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async checkForAccess(){\r\n        if(localStorage.getItem('token')){\r\n            //const ret = await userServices.checkAuth();\r\n            const ret = await fetchServices.fetchGETWithCredentials(`/users/refresh`);\r\n\r\n            localStorage.setItem('token', ret.accessToken);\r\n\r\n            if(ret?.message){\r\n                return false;\r\n            }else{\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async logOutUser(){\r\n        //const ret = await userServices.logOut();\r\n        const ret = await fetchServices.fetchGETWithCredentials(`/users/logout`);\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('mail');\r\n\r\n        if(ret?.message){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async getUserInfo(email){\r\n        //const ret = await userServices.getUserInfo(email);\r\n        const ret = await fetchServices.fetchGETWithCredentialsAndAuthorization(`/users/${email}`, localStorage.getItem('token'));\r\n\r\n        return ret;\r\n    }\r\n\r\n    async updateUserField(field, newValue){\r\n        console.log(field + ' will be now: ' + newValue);\r\n    }\r\n\r\n    async getUserTopics(email){\r\n        //const ret = await topicServices.getAllUserTopics(email);\r\n        const ret = await fetchServices.fetchGETWithCredentialsAndAuthorization(`/topics/${email}`, localStorage.getItem('token'));\r\n        console.log(ret);\r\n        return ret;\r\n    }\r\n}\r\n\r\nconst userController = new UserController();\r\n\r\nexport default userController;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}