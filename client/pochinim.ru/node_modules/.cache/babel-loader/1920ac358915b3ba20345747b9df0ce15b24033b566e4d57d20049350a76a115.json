{"ast":null,"code":"class UserServices {\n  async registrate(login, email, password) {\n    try {\n      const body = {\n        \"login\": login,\n        \"password\": password,\n        \"email\": email\n      };\n      const data = await fetch(\"http://localhost:4000/api/registration\", {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: 'include',\n        body: JSON.stringify(body)\n      });\n      const bot = await data.json();\n      localStorage.setItem('token', bot.accessToken);\n      localStorage.setItem('mail', email);\n      console.log(bot);\n      return bot;\n    } catch (error) {\n      console.log(\"Error in registration:\", error);\n    }\n  }\n  async checkEmail(email) {\n    try {\n      const body = {\n        \"email\": email\n      };\n      const data = await fetch(\"http://localhost:4000/api/checkEmail\", {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: 'include',\n        body: JSON.stringify(body)\n      });\n      const bot = await data.json();\n      return bot;\n    } catch (error) {\n      console.log(\"Error in checkEmail:\", error);\n    }\n  }\n  async sendCode(email) {\n    try {\n      const body = {\n        \"email\": email\n      };\n      const data = await fetch(\"http://localhost:4000/api/sendActivateCode\", {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const bot = await data.json();\n      return bot;\n    } catch (error) {\n      console.log(\"Error in sendCode:\", error);\n    }\n  }\n  async logIn(email, password) {\n    try {\n      const body = {\n        \"email\": email,\n        \"password\": password\n      };\n      const data = await fetch(\"http://localhost:4000/api/logIn\", {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: 'include',\n        body: JSON.stringify(body)\n      });\n      const bot = await data.json();\n      localStorage.setItem('token', bot.accessToken);\n      localStorage.setItem('mail', email);\n      console.log(localStorage.getItem('token'));\n      return bot;\n    } catch (error) {\n      console.log(\"Error in logIn:\", error);\n    }\n  }\n  async logOut() {\n    try {\n      const data = await fetch(\"http://localhost:4000/api/logOut\", {\n        credentials: \"include\",\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const bot = await data.json();\n      return bot;\n    } catch (error) {\n      console.log(\"Error in logOut:\", error);\n    }\n  }\n  async checkAuth() {\n    try {\n      const data = await fetch(\"http://localhost:4000/api/refresh\", {\n        credentials: \"include\",\n        method: \"GET\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const bot = await data.json();\n      localStorage.setItem('token', bot.accessToken);\n      return bot;\n    } catch (error) {\n      console.log(\"Error in checkAuth:\", error);\n    }\n  }\n}\n;\nconst userServices = new UserServices();\nexport default userServices;","map":{"version":3,"names":["UserServices","registrate","login","email","password","body","data","fetch","method","headers","credentials","JSON","stringify","bot","json","localStorage","setItem","accessToken","console","log","error","checkEmail","sendCode","logIn","getItem","logOut","checkAuth","userServices"],"sources":["C:/Users/denis/vs_code/Pochinim.ru/client/pochinim.ru/src/services/user-services.js"],"sourcesContent":["class UserServices{\r\n    async registrate(login, email, password){\r\n        try {\r\n            const body = {\"login\": login, \"password\": password, \"email\": email};\r\n            const data = await fetch(\"http://localhost:4000/api/registration\",{\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"}, \r\n                credentials: 'include',\r\n                body: JSON.stringify(body)\r\n            })\r\n            const bot = await data.json();\r\n            localStorage.setItem('token', bot.accessToken);\r\n            localStorage.setItem('mail', email);\r\n\r\n            console.log(bot);\r\n\r\n            return bot;\r\n        } catch (error) {\r\n            console.log(\"Error in registration:\", error);\r\n        }\r\n    }\r\n    \r\n    async checkEmail(email){\r\n        try {\r\n            const body = {\"email\": email};\r\n\r\n            const data = await fetch(\"http://localhost:4000/api/checkEmail\",{\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"},\r\n                credentials: 'include',\r\n                body: JSON.stringify(body)\r\n            })\r\n\r\n            const bot = await data.json();\r\n            return bot;\r\n\r\n        } catch (error) {\r\n            console.log(\"Error in checkEmail:\", error);\r\n        }\r\n    }\r\n\r\n    async sendCode(email){\r\n        try {\r\n            const body = {\"email\": email};\r\n\r\n            const data = await fetch(\"http://localhost:4000/api/sendActivateCode\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify(body)\r\n            })\r\n\r\n            const bot = await data.json();\r\n            return bot;\r\n        } catch (error) {\r\n            console.log(\"Error in sendCode:\", error);\r\n        }\r\n    }\r\n\r\n    async logIn(email, password){\r\n        try {\r\n            const body = {\"email\": email, \"password\": password};\r\n            \r\n            const data = await fetch(\"http://localhost:4000/api/logIn\",{\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"}, \r\n                credentials: 'include',\r\n                body: JSON.stringify(body)\r\n            })\r\n            const bot = await data.json();\r\n            localStorage.setItem('token', bot.accessToken)\r\n            localStorage.setItem('mail', email);\r\n            console.log(localStorage.getItem('token'));\r\n            return bot;\r\n        } catch (error) {\r\n            console.log(\"Error in logIn:\", error);\r\n        }\r\n    }\r\n\r\n    async logOut(){\r\n        try {\r\n            const data = await fetch(\"http://localhost:4000/api/logOut\",{\r\n                credentials: \"include\",\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"}, \r\n            })\r\n            const bot = await data.json();\r\n            return bot;\r\n        } catch (error) {\r\n            console.log(\"Error in logOut:\", error);\r\n        }\r\n    }\r\n    \r\n    async checkAuth(){\r\n        try {\r\n            const data = await fetch(\"http://localhost:4000/api/refresh\",{\r\n                credentials: \"include\",\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"}, \r\n            });\r\n            const bot = await data.json();\r\n\r\n            localStorage.setItem('token', bot.accessToken);\r\n\r\n            return bot;\r\n        } catch (error) {\r\n            console.log(\"Error in checkAuth:\", error);\r\n        }\r\n    }\r\n};\r\n\r\nconst userServices = new UserServices()\r\n\r\nexport default userServices;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}