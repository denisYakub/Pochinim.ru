{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport userController from \"./USER-controller\";\nclass TopicController {\n  constructor() {\n    makeAutoObservable(this);\n  }\n  async createNewTopic(topic_name, fio, phoneNumber, need, problem, problem_location, address, date, {\n    payment_option,\n    priceStart,\n    priceEnd\n  }, {\n    details_text,\n    details_files\n  }, mail, token) {\n    console.log(topic_name, fio, phoneNumber, need, problem, problem_location, address, date, {\n      payment_option,\n      priceStart,\n      priceEnd\n    }, {\n      details_text,\n      details_files\n    }, mail, token);\n    const body = {\n      \"topicName\": topic_name,\n      \"fio\": fio,\n      \"phoneNumber\": phoneNumber,\n      \"need\": need,\n      \"problem\": problem,\n      \"problemLocation\": problem_location,\n      \"address\": address,\n      \"date\": date,\n      \"payment\": payment_option,\n      \"priceStart\": priceStart,\n      \"priceEnd\": priceEnd,\n      \"detailsTxt\": details_text,\n      \"mail\": mail\n    };\n    const resultFromServer = await (await fetch(`http://localhost:4000/api/topics`, {\n      credentials: 'include',\n      method: 'POST',\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    })).json();\n    if (resultFromServer !== null && resultFromServer !== void 0 && resultFromServer.id_topic) {\n      const files = new FormData();\n      for (let i = 0; i < details_files.length; i++) {\n        files.append('topicMainPhotos', details_files[i]);\n      }\n      await fetch(`http://localhost:4000/api/topics/${resultFromServer.id_topic}`, {\n        method: \"PUT\",\n        body: files\n      });\n      return resultFromServer.id_topic;\n    } else {\n      return resultFromServer;\n    }\n  }\n  async getPhotosByIdTopic(id_topic) {\n    const token = localStorage.getItem('token');\n    const paths = await fetch(`http://localhost:4000/api/topics/images/${id_topic}`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    console.log(paths);\n    const body = {\n      paths: paths\n    };\n    const result = await fetch(`http://localhost:4000/api/photos`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify(body)\n    });\n    return result.json();\n  }\n  async getListOfExistingTopics() {\n    const options = [\"Сантехник ремонт\", \"Сантехник ремонт стояка\", \"Сантехник онлайн\", \"Сантехник эксперт\", \"Сантехник срочно\"];\n    return options;\n  }\n  async getListOfWork() {\n    const options = [\"Срочная помощь при аварии\", \"Прочистка канализации\", \"Устранение течи\", \"Ремонт сантехники\", \"Установка или замена сантехники\", \"Демонтаж сантехники\", \"Дистанционная консульация сантехника\"];\n    return options;\n  }\n  async getListOfWhatHappend() {\n    const options = [\"Течь\", \"Засор\", \"Ржавчина\"];\n    return options;\n  }\n  async getListofWhereIsProblem() {\n    const options = [\"Трубы, соединения труб\", \"Унитаз\", \"Раковина, мойка\", \"Ванна\", \"Душевая кабина\", \"Полотенцесушитель\", \"Стояк\", \"Не знаю\"];\n    return options;\n  }\n}\n;\nconst topicController = new TopicController();\nexport default topicController;","map":{"version":3,"names":["makeAutoObservable","userController","TopicController","constructor","createNewTopic","topic_name","fio","phoneNumber","need","problem","problem_location","address","date","payment_option","priceStart","priceEnd","details_text","details_files","mail","token","console","log","body","resultFromServer","fetch","credentials","method","headers","JSON","stringify","json","id_topic","files","FormData","i","length","append","getPhotosByIdTopic","localStorage","getItem","paths","result","getListOfExistingTopics","options","getListOfWork","getListOfWhatHappend","getListofWhereIsProblem","topicController"],"sources":["C:/Users/denis/VSCode_projects/Pochinim.ru/client/pochinim.ru/src/controllers/TOPIC-controller.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport userController from \"./USER-controller\";\r\nclass TopicController{\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n    async createNewTopic(topic_name, fio, phoneNumber, need,\r\n            problem, problem_location, address, date,\r\n            {payment_option, priceStart, priceEnd}, {details_text, details_files}, \r\n            mail, token\r\n        ){\r\n            console.log(topic_name, fio, phoneNumber, need,\r\n                problem, problem_location, address, date,\r\n                {payment_option, priceStart, priceEnd}, {details_text, details_files}, \r\n                mail, token);\r\n\r\n            const body = {\"topicName\": topic_name, \"fio\": fio, \"phoneNumber\": phoneNumber,\r\n                            \"need\": need, \"problem\": problem, \"problemLocation\": problem_location,\r\n                            \"address\": address, \"date\": date, \"payment\":payment_option, \r\n                            \"priceStart\": priceStart, \"priceEnd\": priceEnd,\r\n                            \"detailsTxt\":  details_text, \"mail\": mail};\r\n\r\n            const resultFromServer = await (await fetch(`http://localhost:4000/api/topics`,{\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                    headers : {\r\n                    \"Authorization\": `Bearer ${token}`,\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            })).json()\r\n            \r\n            if(resultFromServer?.id_topic){\r\n            \r\n                const files = new FormData();\r\n                \r\n                for(let i = 0; i < details_files.length; i++){\r\n                    files.append('topicMainPhotos', details_files[i]);\r\n                }\r\n                \r\n                await fetch(`http://localhost:4000/api/topics/${resultFromServer.id_topic}`,{\r\n                    method: \"PUT\",\r\n                    body: files\r\n                });\r\n                \r\n                return resultFromServer.id_topic;\r\n            }else{\r\n                return resultFromServer;\r\n            }\r\n        \r\n    }\r\n\r\n    async getPhotosByIdTopic(id_topic){\r\n\r\n        const token = localStorage.getItem('token');\r\n\r\n        const paths = await fetch(`http://localhost:4000/api/topics/images/${id_topic}`, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers : {\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${token}`,\r\n            }\r\n        });\r\n\r\n        console.log(paths);\r\n        \r\n        const body = { paths: paths };\r\n\r\n        const result = await fetch(`http://localhost:4000/api/photos`, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            headers : {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(body)\r\n        });\r\n\r\n        return result.json();\r\n    }\r\n    \r\n    async getListOfExistingTopics(){\r\n        const options = [\"Сантехник ремонт\", \"Сантехник ремонт стояка\",\r\n                            \"Сантехник онлайн\", \"Сантехник эксперт\", \r\n                            \"Сантехник срочно\"];\r\n        return options;\r\n    }\r\n    \r\n    async getListOfWork(){\r\n        const options = [\"Срочная помощь при аварии\", \"Прочистка канализации\",\r\n                            \"Устранение течи\", \"Ремонт сантехники\", \r\n                            \"Установка или замена сантехники\", \"Демонтаж сантехники\",\r\n                            \"Дистанционная консульация сантехника\"];\r\n        return options;\r\n    }\r\n    \r\n    async getListOfWhatHappend(){\r\n        const options = [\"Течь\", \"Засор\", \"Ржавчина\"];\r\n        return options;\r\n    }\r\n    \r\n    async getListofWhereIsProblem(){\r\n        const options = [\"Трубы, соединения труб\", \"Унитаз\", \"Раковина, мойка\", \"Ванна\", \"Душевая кабина\",\r\n                            \"Полотенцесушитель\", \"Стояк\", \"Не знаю\"];\r\n        return options;\r\n    }\r\n};\r\n\r\nconst topicController = new TopicController();\r\n\r\nexport default topicController;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}